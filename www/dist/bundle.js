!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},o.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e){this.filters=e}return e.convertUnixDate=function(e){var t=new Date(1e3*e);return console.log(t.getFullYear()),{day:t.getDate(),month:t.getMonth(),year:t.getUTCFullYear(),hour:t.getHours(),minutes:t.getMinutes(),seconds:t.getSeconds()}},e.prototype.getAllSMS=function(){SMS&&SMS.listSMS(this.filters,function(t){for(var o={},n=0;n<t.length;n++)if(t[n].address.length>7&&t[n].address.match("[0-9]+")){var r=e.convertUnixDate(t[n].date);if(o.hasOwnProperty(t[n].address))Object.defineProperty(o[t[n].address],t[n]._id,{value:{body:t[n].body,date:r}});else{String(t[n]._id);Object.defineProperty(o,t[n].address,{value:{"000":{body:t[n].body,date:r}}})}}console.log("contacts"),console.log(o)},function(e){console.log("error list sms: "+e)})},e}();t.SMSManager=n},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(0),r=function(){function e(){document.addEventListener("deviceready",this.onDeviceReady,!1)}return e.prototype.onDeviceReady=function(){console.log("The device is ready"),console.log("localStorage"),console.log(localStorage),new n.SMSManager({box:"sent",maxCount:2e3}).getAllSMS()},e}();t.CordovaApp=r;new r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,